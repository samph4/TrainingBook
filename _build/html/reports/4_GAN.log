Traceback (most recent call last):
  File "c:\users\samuel\miniconda3\envs\tensorflow\lib\site-packages\jupyter_cache\executors\utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "c:\users\samuel\miniconda3\envs\tensorflow\lib\site-packages\nbclient\client.py", line 1082, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "c:\users\samuel\miniconda3\envs\tensorflow\lib\site-packages\nbclient\util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "c:\users\samuel\miniconda3\envs\tensorflow\lib\site-packages\nbclient\util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "c:\users\samuel\miniconda3\envs\tensorflow\lib\asyncio\base_events.py", line 587, in run_until_complete
    return future.result()
  File "c:\users\samuel\miniconda3\envs\tensorflow\lib\site-packages\nbclient\client.py", line 536, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "c:\users\samuel\miniconda3\envs\tensorflow\lib\site-packages\nbclient\client.py", line 827, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "c:\users\samuel\miniconda3\envs\tensorflow\lib\site-packages\nbclient\client.py", line 735, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# size of the latent space
latent_dim = 10
# create the discriminator
discriminator = define_discriminator()
# create the generator
generator = define_generator(latent_dim)
# create the gan
gan_model = define_gan(generator, discriminator)
# train model
train(generator, discriminator, gan_model, latent_dim)
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mInternalError[0m                             Traceback (most recent call last)
[1;32m<ipython-input-17-49a8c05ed17a>[0m in [0;36m<module>[1;34m[0m
[0;32m      8[0m [0mgan_model[0m [1;33m=[0m [0mdefine_gan[0m[1;33m([0m[0mgenerator[0m[1;33m,[0m [0mdiscriminator[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m      9[0m [1;31m# train model[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 10[1;33m [0mtrain[0m[1;33m([0m[0mgenerator[0m[1;33m,[0m [0mdiscriminator[0m[1;33m,[0m [0mgan_model[0m[1;33m,[0m [0mlatent_dim[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m
[1;32m<ipython-input-16-ad3cfc8f0839>[0m in [0;36mtrain[1;34m(generator, discriminator, gan_model, latent_dim, n_epochs, n_batch, check_it)[0m
[0;32m      8[0m         [0mx_real[0m[1;33m,[0m [0my_real[0m [1;33m=[0m [0mtake_real_samples[0m[1;33m([0m[0mhalf_batch[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m      9[0m         [1;31m# prepare fake examples[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 10[1;33m         [0mx_fake[0m[1;33m,[0m [0my_fake[0m [1;33m=[0m [0mgenerate_fake_samples[0m[1;33m([0m[0mgenerator[0m[1;33m,[0m [0mlatent_dim[0m[1;33m,[0m [0mhalf_batch[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     11[0m         [1;31m# update discriminator[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[0;32m     12[0m         [0mdiscriminator[0m[1;33m.[0m[0mtrain_on_batch[0m[1;33m([0m[0mx_real[0m[1;33m,[0m [0my_real[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32m<ipython-input-11-09e284b18cef>[0m in [0;36mgenerate_fake_samples[1;34m(generator, latent_dim, n)[0m
[0;32m      4[0m     [0mx_input[0m [1;33m=[0m [0mcreate_latent_points[0m[1;33m([0m[0mlatent_dim[0m[1;33m,[0m [0mn[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m      5[0m     [1;31m# predict outputs[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[1;32m----> 6[1;33m     [0mX[0m [1;33m=[0m [0mgenerator[0m[1;33m.[0m[0mpredict[0m[1;33m([0m[0mx_input[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m      7[0m     [1;31m# create class labels[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[0;32m      8[0m     [0my[0m [1;33m=[0m [0mnp[0m[1;33m.[0m[0mzeros[0m[1;33m([0m[1;33m([0m[0mn[0m[1;33m,[0m [1;36m1[0m[1;33m)[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\miniconda3\envs\tensorflow\lib\site-packages\keras\engine\training.py[0m in [0;36mpredict[1;34m(self, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing)[0m
[0;32m   1460[0m                                             [0mverbose[0m[1;33m=[0m[0mverbose[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1461[0m                                             [0msteps[0m[1;33m=[0m[0msteps[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1462[1;33m                                             callbacks=callbacks)
[0m[0;32m   1463[0m [1;33m[0m[0m
[0;32m   1464[0m     def train_on_batch(self, x, y,

[1;32m~\miniconda3\envs\tensorflow\lib\site-packages\keras\engine\training_arrays.py[0m in [0;36mpredict_loop[1;34m(model, f, ins, batch_size, verbose, steps, callbacks)[0m
[0;32m    322[0m             [0mbatch_logs[0m [1;33m=[0m [1;33m{[0m[1;34m'batch'[0m[1;33m:[0m [0mbatch_index[0m[1;33m,[0m [1;34m'size'[0m[1;33m:[0m [0mlen[0m[1;33m([0m[0mbatch_ids[0m[1;33m)[0m[1;33m}[0m[1;33m[0m[1;33m[0m[0m
[0;32m    323[0m             [0mcallbacks[0m[1;33m.[0m[0m_call_batch_hook[0m[1;33m([0m[1;34m'predict'[0m[1;33m,[0m [1;34m'begin'[0m[1;33m,[0m [0mbatch_index[0m[1;33m,[0m [0mbatch_logs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 324[1;33m             [0mbatch_outs[0m [1;33m=[0m [0mf[0m[1;33m([0m[0mins_batch[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    325[0m             [0mbatch_outs[0m [1;33m=[0m [0mto_list[0m[1;33m([0m[0mbatch_outs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    326[0m             [1;32mif[0m [0mbatch_index[0m [1;33m==[0m [1;36m0[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\miniconda3\envs\tensorflow\lib\site-packages\tensorflow_core\python\keras\backend.py[0m in [0;36m__call__[1;34m(self, inputs)[0m
[0;32m   3725[0m         [0mvalue[0m [1;33m=[0m [0mmath_ops[0m[1;33m.[0m[0mcast[0m[1;33m([0m[0mvalue[0m[1;33m,[0m [0mtensor[0m[1;33m.[0m[0mdtype[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m   3726[0m       [0mconverted_inputs[0m[1;33m.[0m[0mappend[0m[1;33m([0m[0mvalue[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 3727[1;33m     [0moutputs[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0m_graph_fn[0m[1;33m([0m[1;33m*[0m[0mconverted_inputs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   3728[0m [1;33m[0m[0m
[0;32m   3729[0m     [1;31m# EagerTensor.numpy() will often make a copy to ensure memory safety.[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\miniconda3\envs\tensorflow\lib\site-packages\tensorflow_core\python\eager\function.py[0m in [0;36m__call__[1;34m(self, *args, **kwargs)[0m
[0;32m   1549[0m       [0mTypeError[0m[1;33m:[0m [0mFor[0m [0minvalid[0m [0mpositional[0m[1;33m/[0m[0mkeyword[0m [0margument[0m [0mcombinations[0m[1;33m.[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1550[0m     """
[1;32m-> 1551[1;33m     [1;32mreturn[0m [0mself[0m[1;33m.[0m[0m_call_impl[0m[1;33m([0m[0margs[0m[1;33m,[0m [0mkwargs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1552[0m [1;33m[0m[0m
[0;32m   1553[0m   [1;32mdef[0m [0m_call_impl[0m[1;33m([0m[0mself[0m[1;33m,[0m [0margs[0m[1;33m,[0m [0mkwargs[0m[1;33m,[0m [0mcancellation_manager[0m[1;33m=[0m[1;32mNone[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\miniconda3\envs\tensorflow\lib\site-packages\tensorflow_core\python\eager\function.py[0m in [0;36m_call_impl[1;34m(self, args, kwargs, cancellation_manager)[0m
[0;32m   1589[0m       raise TypeError("Keyword arguments {} unknown. Expected {}.".format(
[0;32m   1590[0m           list(kwargs.keys()), list(self._arg_keywords)))
[1;32m-> 1591[1;33m     [1;32mreturn[0m [0mself[0m[1;33m.[0m[0m_call_flat[0m[1;33m([0m[0margs[0m[1;33m,[0m [0mself[0m[1;33m.[0m[0mcaptured_inputs[0m[1;33m,[0m [0mcancellation_manager[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1592[0m [1;33m[0m[0m
[0;32m   1593[0m   [1;32mdef[0m [0m_filtered_call[0m[1;33m([0m[0mself[0m[1;33m,[0m [0margs[0m[1;33m,[0m [0mkwargs[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\miniconda3\envs\tensorflow\lib\site-packages\tensorflow_core\python\eager\function.py[0m in [0;36m_call_flat[1;34m(self, args, captured_inputs, cancellation_manager)[0m
[0;32m   1690[0m       [1;31m# No tape is watching; skip to running the function.[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1691[0m       return self._build_call_outputs(self._inference_function.call(
[1;32m-> 1692[1;33m           ctx, args, cancellation_manager=cancellation_manager))
[0m[0;32m   1693[0m     forward_backward = self._select_forward_and_backward_functions(
[0;32m   1694[0m         [0margs[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\miniconda3\envs\tensorflow\lib\site-packages\tensorflow_core\python\eager\function.py[0m in [0;36mcall[1;34m(self, ctx, args, cancellation_manager)[0m
[0;32m    543[0m               [0minputs[0m[1;33m=[0m[0margs[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    544[0m               [0mattrs[0m[1;33m=[0m[1;33m([0m[1;34m"executor_type"[0m[1;33m,[0m [0mexecutor_type[0m[1;33m,[0m [1;34m"config_proto"[0m[1;33m,[0m [0mconfig[0m[1;33m)[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 545[1;33m               ctx=ctx)
[0m[0;32m    546[0m         [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    547[0m           outputs = execute.execute_with_cancellation(

[1;32m~\miniconda3\envs\tensorflow\lib\site-packages\tensorflow_core\python\eager\execute.py[0m in [0;36mquick_execute[1;34m(op_name, num_outputs, inputs, attrs, ctx, name)[0m
[0;32m     65[0m     [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m     66[0m       [0mmessage[0m [1;33m=[0m [0me[0m[1;33m.[0m[0mmessage[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 67[1;33m     [0msix[0m[1;33m.[0m[0mraise_from[0m[1;33m([0m[0mcore[0m[1;33m.[0m[0m_status_to_exception[0m[1;33m([0m[0me[0m[1;33m.[0m[0mcode[0m[1;33m,[0m [0mmessage[0m[1;33m)[0m[1;33m,[0m [1;32mNone[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     68[0m   [1;32mexcept[0m [0mTypeError[0m [1;32mas[0m [0me[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m     69[0m     keras_symbolic_tensors = [

[1;32m~\miniconda3\envs\tensorflow\lib\site-packages\six.py[0m in [0;36mraise_from[1;34m(value, from_value)[0m

[1;31mInternalError[0m:  Blas GEMM launch failed : a.shape=(32, 10), b.shape=(10, 15), m=32, n=15, k=10
	 [[node dense_6/MatMul (defined at C:\Users\Samuel\miniconda3\envs\tensorflow\lib\site-packages\keras\backend\tensorflow_backend.py:3009) ]] [Op:__inference_keras_scratch_graph_377]

Function call stack:
keras_scratch_graph

InternalError:  Blas GEMM launch failed : a.shape=(32, 10), b.shape=(10, 15), m=32, n=15, k=10
	 [[node dense_6/MatMul (defined at C:\Users\Samuel\miniconda3\envs\tensorflow\lib\site-packages\keras\backend\tensorflow_backend.py:3009) ]] [Op:__inference_keras_scratch_graph_377]

Function call stack:
keras_scratch_graph


